Create a program named "my_dict_store" which support following operations on 
dictionary named "capitals" which would have keys as their country and values as their capitals
respectively from the user
for ex: "India" : "New Delhi" ,"USA" : "Washington DC","Nepal": "Kathmandu","Ukraine" : "Kyiv"
is provided by the user 

Operations supported by our program are :
    1: Display number of elements in the capitals collection
    2: Add an element to the capitals collection like --> Afghanistan: Kabul
    3: Add multiple elements to the capitals collection like -->  Albania:Tirana,Algeria:Algiers,Andorra:Andorra la Vella
    4: Remove an element from the collection 	
    5: Take a key from the user and show value if it is present in the dictionary
    6: Take a key from the user update it if it is present in the dictionary or add the key to the dictionary 	


Keep asking the user for the operation in this store untill he chooses to exit from the program

      solution
--------------------------------------------------------------------------------------------------------------------------------------------------


      def dict_display_capitals(capitals):
    """Display number of elements in the capitals collection"""
    print(f"capitals dictionary = {capitals}")

def dict_add_element(capitals):
    """Add "Afghanistan": "Kabul"  to the capitals collection """
    inp_key = input("Please enter the key to add ")
    inp_val = input("Please enter the value to add ")
    capitals[inp_key]= inp_val
    dict_display_capitals(capitals)		

def dict_add_elements(capitals):
    """Add Albania:Tirana,Algeria:Algiers,Andorra:Andorra la Vella to the capitals collection"""    
    sub_dict_of_capitals= {}
    keys = input("Please enter the additional countries as keys for ex : India,USA,Srilanka").split(',')
    for elem in keys :
        sub_dict_of_capitals[elem] = input(f"Please enter the capital for {elem}: ").strip()
    capitals.update(sub_dict_of_capitals)    
    dict_display_capitals(capitals)		
	
def dict_remove_element(capitals):
    """Remove the USA from the collection"""    
    capitals.pop(input("Please enter the key you would want to remove"))
    dict_display_capitals(capitals)

def dict_show_value_for_a_key(capitals):
    print(f'The value for the key : {capitals.get(input("Please enter the key you would like to lookup for "),"Not Found")} ')
    dict_display_capitals(capitals)		

def dict_update_or_add_a_key(capitals):
    input_key = input("Please enter the key that you want want to add or update") 	
    input_value = input("Please enter the value that you want want to add or update")	
    capitals[input_key] = input_value
    dict_display_capitals(capitals)		

def my_dict_store():
    print("\n Welcome to Our Dict Store !!! ")

    capitals= {}
    keys = input("Please enter the countries as keys for ex : India,USA,Srilanka").split(',')
    for elem in keys :
        capitals[elem] = input(f"Please enter the capital for {elem}: ").strip()

    while(True):
        print("\n*************** Menu **********************")
        print("Operations supported by our program are :")
        print("    1: Display elements in the capitals collection")
        print('    2: Add an element to the capitals collection like --> Afghanistan: Kabul')
        print('    3: Add multiple elements to the capitals collection like -->  Albania:Tirana,Algeria:Algiers,Andorra:Andorra la Vella')
        print("    4: Remove an element from the collection 	")
        print("    5: Take a key from the user and show value if it is present in the dictionary")
        print("    6: Take a key from the user update it if it is present in the dictionary or add the key to the dictionary")
        print("    7: Exit the Program ")
        choice = int(input("Please enter your choice "))
        
        if choice   ==1:
            dict_display_capitals(capitals) 
        elif choice ==2:
            dict_add_element(capitals)
        elif choice ==3:
            dict_add_elements(capitals)
        elif choice ==4:
            dict_remove_element(capitals) 
        elif choice ==5:
            dict_show_value_for_a_key(capitals)
        elif choice ==6:
            dict_update_or_add_a_key(capitals)
        elif choice ==7:
            break
        else:
            print("Invalid Input , Please Try Again !!!!  ")	

my_dict_store()

# """
# Exercise 2 : Create a dictionary like this by taking values from the user:
# here the idea is to support a generic dictionary where the values could be of any datatype
# and the keys are strings
# """
# # Solution:

def menu(elem):
    print(f'Please choose a datatype for the {elem} from below')
    print('1: Integer')
    print('2: Float')
    print('3: String')
    print('4: Tuple')
    print('5: List')
    print('6: Dictionary')
    print('7: Set')
    print('8: Frozenset')
    
    dt= int(input())
    if dt != 6 :
        raw_string = input(f"Please enter value for {elem}")
    if dt ==1 :
        return int(raw_string)
    elif dt ==2 :
        return float(raw_string)
    elif dt ==3 :
        return raw_string
    elif dt ==4 :
        return tuple(raw_string.split(','))
    elif dt ==5 :
        return raw_string.split(',')
    elif dt ==6 :
        d = {}
        keys = []
        for i in range(int(input('How many keys'))):
            keys.append(input("Key_name"))
        for elem in keys :
            d[elem] = menu(elem)    
        return d     
    elif dt ==7 :
        return set(raw_string.split(','))
    elif dt ==8 :
        return frozenset(raw_string.split(','))

d = {}
keys = ['employee_id','employee_name','account_number','salary','address']
# keys = ['employee_id','address']

for elem in keys :
    d[elem] = menu(elem)

print(d)  




def set_union(first_set,second_set):
  set_display(first_set)
  set_display(second_set)
  print("Union",first_set.union(second_set))

def set_intersection(first_set,second_set):
  set_display(first_set)
  set_display(second_set)
  print("Intersection",first_set.intersection(second_set))  

def set_minus(first_set,second_set):
  set_display(first_set)
  set_display(second_set)
  print("Difference",first_set.difference(second_set))      

def is_member_of_set(rcv_set , is_str = True):
    element= input("Please enter element to search for ") 
    if not is_str :
        element= int(element )

    print(f"Element: {element} is present(True/False): { element in rcv_set }")  
    set_display(rcv_set)

def set_count(rcv_set):
   print(len(rcv_set))
   
def set_display(rcv_set):
   print(rcv_set)

def set_add_element(rcv_set , is_str = True):
    element= input("Please enter element to search for ") 
    if not is_str :
        element= int(element )
    rcv_set.add(element)
    set_display(rcv_set)
	
def set_add_elements(rcv_set, is_str = True):
    if is_str:
        rcv_set.update(set(input("Please enter comma seperated elements for the set ").split(",")))   
    else:
        temp_set = set()
        for i in range(int(input("element count:"))):
            temp_set.add(int(input("element")))
        rcv_set.update(temp_set)    
    set_display(rcv_set)
	
def set_remove_element(rcv_set, is_str = True):
    element= input("Please enter element to search for ") 
    if not is_str :
        element= int(element )
    
    rcv_set.discard(element)
    set_display(rcv_set)            

def my_set_store():
    print("\n Welcome to Our Set Store !!! ")
    #    # set of strings
    is_str = True
    setA = set(input("Please enter comma seperated elements for the set A").split(","))
    setB = set(input("Please enter comma seperated elements for the set B").split(","))

    # #In case you need a set of numbers you may want to do below instead of above two lines
    # is_str = False
  
    # f_set = set(input("input set A comma seperated").split(','))
    # setA = set()
    # for elem in f_set:
    #     setA.add(int(elem))
        
    # f_set = set(input("input set B comma seperated").split(','))
    # setB = set()
    # for elem in f_set:
    #     setB.add(int(elem))
        
    while(True):
        print("\n*************** Menu **********************")
        print("Operations supported by our program are :")
        print("	1: Union")
        print("	2: Intersection ")
        print("	3: A-B")
        print("	4: B-A")
        print("	5: Take a element from user and Display if that element is a member of set B ")
        print("	6: Display elements in the set A")
        print(" 7: Display number of elements in the set B")
        print("	8: Add an element taken from the user to the set A")
        print("	9: Add multiple elements taken from the user to the set A")
        print("	10: Remove an element taken from the user from set A")
        print(" 11: Exit")

        choice = int(input("Please enter your choice "))

        if choice   ==1:
            set_union(setA,setB) 
        elif choice ==2:
            set_intersection(setA,setB)
        elif choice ==3:
            set_minus(setA,setB)
        elif choice ==4:
            set_minus(setB,setA)
        elif choice ==5:
            is_member_of_set(setB,is_str) 
        elif choice ==6:
            set_display(setA)
        elif choice ==7:
            set_count(setB)
        elif choice ==8:
            set_add_element(setA,is_str)
        elif choice ==9:
            set_add_elements(setA,is_str)
        elif choice ==10:
            set_remove_element(setA,is_str)
        elif choice ==11:
            break
        else:
            print("Invalid Input , Please Try Again !!!!  ")  
            

my_set_store()   
